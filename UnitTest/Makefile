# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make test   - runs all tests
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# All tests produced by this Makefile.  
# Remember to add new tests you created to the list.
TESTS = transactionstate xp_parser

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest-1.6.0

# Where to find user code.
USER_DIR = $(GTEST_DIR)/samples

# Where to find sipp code.
SIPP_DIR = ..

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

define EOL


endef

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

# Run all tests.  EOL makes each line run separately so early failures are reported properly
test : $(TESTS)
	$(foreach test, $^, ./$(test) $(EOL))

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^
#####################################################
## Builds a sample test.  A test should link with either gtest.a or
## gtest_main.a, depending on whether it defines its own main()
## function.
#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc
#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
#                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc
#sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
################################

SIPpedTest.o : SIPpedTest.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c SIPpedTest.cpp
    
##### transactionstate
transactionstate.o : transactionstate.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(SIPP_DIR) $(CXXFLAGS) -c transactionstate.cpp
    
transactionstate : transactionstate.o $(SIPP_DIR)/transactionstate.o $(SIPP_DIR)/logging.o  gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

##### xp_parser
xp_parser.o : xp_parser.cpp  $(GTEST_HEADERS)
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(SIPP_DIR) -c $<

xp_parser : xp_parser.o $(SIPP_DIR)/xp_parser.o $(SIPP_DIR)/CompositeDocument.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#################################

helpers.o : helpers.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(SIPP_DIR) $(CXXFLAGS) -c helpers.cpp
    
helpers : helpers.o $(SIPP_DIR)/helpers.o $(SIPP_DIR)/logging.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
	
