This file tracks changes responsible for version number updates.
$Author $Date $Id $Revision

3.2.47 BETA 
- -ar automatically enabled when -mc is selected
- retransmit logic was prior to matching logic but has been moved to post
  matching logic, during unexpected error handling so that scenario matching
  is done preferentially over retransmit handling.

3.2.46 BETA
- implemented accept retransmitted messages feature, -ar to enable
- corrected WIN32 exception during deallocation on abortCall
- corrected WIN32 exception during error location reporting if end of doc reached
- 3 digit message index number and shifted spacing to accomodate


3.2.45 BETA	
- merged win32 branch back into trunk
- win32 now compiles and runs 80% of ruby test cases
- win32 has the following disabled(compared to cygwin/linux)
	compression
	sipp option plugins (dlsym, dlopen)
	command line interface
	MD5 authentication (requires openssl)
	ssl
	global timers (watchdog timers)
	pcap_play
	_USE_32BIT_TIME_T (64 bit time disabled due to sdk6.0 exceptions)
	signals
	
	

3.2.44 BETA
- WIN32 refactoring. Compiles on msvs while retaining linux/cygwin functionality.

3.2.43
- disabled compression to eliminate dependancy on dlfcn for win32
- minor socket helping functions rearranged.

3.2.42 Jun 04 2012
- msvc refactoring in prep for windows port
- moved some sipp mini parser methods to sipp_globals (get_tag_from_from, get_tag_from_to, get_call_id
- moved perip_fd to sipp_globals


3.2.41 Jun 01 2012
- msvc gtest fixes
- refactoring of screen, call, sipp in prep for win32 port

3.2.40 May 30 2012
- reformatted all modules using  
	astlye --style=stroustrup --indent=spaces=2 --convert-tabs *.cpp *.hpp 
- breaks brackets only from function definitions (attached in namespace, classes and statements in functions)
- all tabs replaced by spaces(except inside quotes), indenting at 2 spaces.

3.2.39 May 30 2012
- resolve some  msvc compiler errors 
	- align decl/defn, remove extern declaration and use include sipp_globals
	- move some socket decl out of sipp.hpp and sipp_globals.hpp into sipp.cpp (local use only)
	- move function out from sipp.cpp into sipp_globals.cpp to break a dependancy on sipp.cpp


3.2.38 May 29  2012  
- enable checking of optional messages within dialog during call::init
- for win32, removed dependancies on ncurses by defining clearscreen function, removing initscr
	explictly defining KEY_BACKSPACE and KEY_DC for platforms. 

3.2.38 May 29  2012  
-fix some compiler warnings regarding initialization order, signed to unsigned comparisons, unused variables
-change optional ipv6 ip address attribute from no_esc to no_square_brackets 

3.2.37 May 18 2012
- add optional attribute  no_esc  to local_ip remote_ip media_ip server_ip to remove ipv6 square brackets.
default is with escaping. This option has no impact on ipv4 addresses.

3.2.36 May 11 2012
loose_message_sequence
-fix advancing of prereceived messages on receipt of current expected message
-fix scanning forward for candidate messages to stop if current message is a unrecv mand msg
-change appearance of optional messages in dsd



3.2.35
-fix some general compiler warnings


3.2.34

loose_message_sequence more system level tests
-preReceived messages after nop and pause are properly skipped over 
-fix handling of duplicate advance messages
-fix scan forward for acceptable messages to stop at send messages
-check for last message that is optional and disallow

3.2.33 May 04 2012
- loose_message_sequence refinements 
- fleshing out debug statements
- enable receipt of multiple copies of optional
- fix handling of mandatory while waiting on optional
- unexpected message errors show list of possible expected messages including next blocking sending message
- handling of pre-received messages after send,nop, pause
- fix advancing on pre-received messages to stop advancing at outgoing messages 


3.2.32 May 02 2012
- loose_message_sequence refinements 
- auto detect use of branching (next and jump) to disable loose_message_sequence
- correct handling of multiple occurence of same message within a dialog for loose_message_sequence
- handling of pause and nop for loose_message_sequence
- use cumulative calls as reference to identify already received messages to allow for sipp or remote originations

3.2.31 May 01 2012
- refactored socket helper routines into socket_helper.cpp/hpp
- added dest ip port validation check for media playback 

3.2.30 Apr 27 2012
- enabled index counter to be shown on message sequence diagrams by default


3.2.29 Apr 26 2012
- enabled loose_message_sequence, active when -mc option is used
- added * indicator to optional messages in dump sequence diagram 

3.2.28 Apr 18 2012
- enable tcp reconnection after phone FIN connection.  
- enable sipp to use an existing tcp connection rather than initiating a new connection for responses

3.2.27 Apr 10 2012
- fixed one way audio on sipp ipv6 playback(sipp was sending to port 0)

3.2.26 Mar 13 2012
- phase 2 refactor sipp globals: unwind implied dependancies and make them explicit.
- removed some dependancies that are now no longer required

3.2.25 Mar 12 2012
- phase 1 refactoring sipp globals : introduction of sipp_globals.hpp/.cpp, elim of use of (_DEFVAL, overridden extern)

3.2.24 Feb 22 2012
- implemented infrastructure to support reporting of sipp xml document location for files with multiple includes + unit tests

3.2.23 Feb-14-2012
- implemented ability to use env variables within include filename specification using % as start/end delimiter
- gtest case and ruby test case updates 
- redirected xp_parser errors to REPORT_ERROR. Previously, Errors were overwritten by _screen_error and then again by endwin. 
- 
3.2.22 Feb-08-2012
- Fix recognition of comment tags around xi-include
- added gtest and ruby test for comments and xi include
- added gtest unit test for xp_parser

3.2.21 Jan-26-2012
- Fix bug where dialog="08" is treated as invalid octal number rather than base-10 '8'.
- Remove -fsm and -fcm short names for -force_server_mode and -force_client_mode.
- Only accept incoming TCP/TLS connections from remote host in -mc mode to prevent side-effects
  Other unregistered phones.
- Improve debug logging for TCP-related issues.
- Improve SSL-related error messages.
- Change cakey.bin to cakey.pem in WindowsBinary folder to match SIPp default names
- Added Google Test unit test framework
- Changes towards native Win32 execution (supporting libraries, refactoring of existing code).

3.2.20 Dec-8-2011
- Use posix_spawn() or spawnvep() instead of fork/exec for performing <exec> operation to work around cygwin bug and prepare for Win32 port.
- Add support for Radiotap and 802.11 QoS RTP playback
- Improve error message when SIPp gets RESPONSE when it was execting a request.
- Trace_debug no longer automatically enable trace_exec (so we can debug exec-related issues)
- cppcheck cleanup (should have no effect)
- Convert .c files to .cpp and remove extern "C" statements. Fix the few issues caused by C++ rather than C compiler rules
- Now properly sets default transaction as -1 rather than 0.
- Cleaned up the xp_convert_special_characters function.
- Disable buffered output for debug and exec logs so log files get generated even if process is aborted.
- Update error message with more detail when attempting to use start_txn with responses.

3.2.18 Oct-24-2011
- Add many SSL enhancements
- When there is a nop SIPp is forced into client mode, for TLS default to server mode.  Also default to port 5061 for TLS.
- Make SIPp able to use the certificates in the directory in which sipp is being run from by using "SIPPED" environment variable to check direction sipp is in, as well as continuing to support certificates in the current directory.
- Add -force_client_mode and -fcm to force client mode. Also added -force_server_mode/-fsm to force server mode.
- Better error message when recieves response while expecting request.
- Fix 'assertion failure when aa in forced client mode' bug  [happens when incoming TCP connection is established, handled with auto-answer, but the code 'expects' to be in server mode.]  If sipp trys to autorespond without a socket set up for the current call (like in the case above), sipp tries sending back on the last socket open (which should be the port opened to send the unexpected message in the first place).
- Fix RTP playback from correct IP on multi-homed machiens (bind rtp socket to media_ip, transmit as UDP, not raw).
- Fix crash when no scenario is specified (ie neither -sf nor -sn)
- Fix .xml stripping from scenario file parameter (-sf)
- Set deadcall_time to 0 with -mc by default
- Improved error/trace/debug logs associated with exec and raw socket failure
- Support RTP playback from cooked format (in prepare_pcap)
- Optimize load of SIPp with large files (strstr replaced)


3.2.17 09-09-2011

- Encoding attribute for DialogSpecific keywords
- Eliminate bind error crash if wrong IP specified with -i
- Improve error messages
- Verify that value associated with argument exists (is not another argument)

3.2.16 08-12-2011
- Add check_it and check_it_inverse to strcmp that aborts test if result is not 0 (that is, if the strings don't match). 
- Prettification of Error messages
- -dsd option as shortcut for dump_sequence_diagram [just have "dsd" do identical thing as "dump_sequence_diagram" in array of command line arguments]
- improved rsipp error messages
- All errors (after parameter parsing) output to log file for easier integration with AutoTester; precise return codes for those prior to log availability.



3.2.15 08-09-2011
- RTP playback (play_pcap_X) support for 802.1q (VLAN) tagging.
- Support running sipp files that use play_pcap_* from another directory (especially as this is how TA framework launches SIPp).
- Add full DTD for <test>, arithmetic operators and other missing tags
- Improve windows test harness
- Make CTRL-C cause FAIL not PASS in receive_call test case
- Ensure that check_it_inverse does not trigger the 'variable used one time error' for all functions that have it. - Done Aug 2, 2011
- Ensure SIPp return codes are sufficient to understand the reason for exit and use those reason codes to make the Rsipp output english.
- Fix generation of Content-Length: [len] when used in middle of header list and no body.
- Improve error message associated with unknown response CSEQ method when mixing start_txn and non-txn usage.
- Log error message rather than crash when \n encountered in [keywords].
- Report error if [remote_ip] used but not specified on command line - Done July 12 2011 
- No longer auto-generate remote_tag if unspecified; Implement generated="true"|"false" attribute for [remote_tag] and [remote_tag_param] 
  such that it is auto-generated ONLY if generated="true" is specified.


3.2.14 06-13-2011
- SIPp crashing when ']' missing from keyword parameter.  Removed tsrc, as it wasn't actually doing anything except when 
the scenario file was misformatted.  Added error message when end of keyword character is missing.
- Add check_it="true" option to <text> tag to cause SIPp to return FAIL if test returns false.
- Allow <test> tag to operate on string types (automatically converting results to doubles) so regexp matches can be tested.
- Accept xml encoding of < > & ' and " in the &lt; &gt; &amp; &quot; &apos;
- Implement encoding="uri" attribute for keywords
- Implement Windows-native test harness so testing of pcap and ossl functionality possible.
- SIPp to listen only for traffic FROM a specific address. This will allow it to ignore unrelated traffic (like REGISTER requests from 
other phones). Must also allow multiple instances running at the same time.  Made a change for the case when -mc is enabled, and SIPp 
is running as a client.  In this case the socket can be connected to the given remote address so all other traffic is ignored.  Made a 
change to the sipp do connect function, to let connect be called on UDP sockets when only one call is being run.
- If script stops early due to 'Q' being pressed this is FAIL, not PASS (change SIPp return code).
- Calculate source RTP ports at or before streaming of Video & Audio RTP so that source port of 0 is never used => instead use same port 
that is transmitted (later) in SIPp's SDP response. Must not break support for renegotiating SDP ports in subsequent reINVITEs / dialogs. 
Added "media_port_offset" to allow the user to set offsets for each pcap play.  If you wish to run RTP before the SDP is sent out simply 
set offset to zero.  Added functionality in sendpackets to allow each pcap play to mantain it's own port throughout the entire play.  Added 
parsing to get the offset, and generalized it to use in the parsing of offsets for other elements as well (such as when the sdp contains 
[media_port+#]).
- Remove RTP-related startup debug output 



3.2.13 05-21-2011
- Must not return fail code for non errors such as "The minor watchdog timer 500ms has been tripped" (Disabled watchdog when -mc is enabled.)
- Aligned Pause and NOP in the sequence diagram (add/remove whitespace)
- Fix typo in SSL
- Don't display the error (or return error return code) message if the phone is doing -aa and receives a register: this is by design!
- Implement short header support by matching [last_X] in short form to long form and vice versa and transposing the result to the correct 
format. For example [last_i:] will match 'call-id: Value' header in previous messages and the resulting output will be changed to 
'i: value' in output. Likewise [last_Call-Id] will match 'i: value' in previous message and the resulting output will be changed to 
'Call-Id: value'.  Added logic to call.cpp to allow sipp to go back and forth between the long and short form headers in get_header 
(originally just checked for short name given long). 
(Added an "alt_name" helper function which returns the short/long form given the 
long/short form. Added some helpful debug messages when the header is not found.  Updated test cases to add a check for this functionality.)


3.2.12 05-13-2011
- Add transaction support (use_txn, start_txn)
- Add transaction support to keywords client_cseq*, server_cseq*, received_cseq*, cseq*, branch, last_branch, last_cseq_number, last_request_uri, last_message, last_*
- Aborting rather than warn when regex with checkit fails
- Allow re-use of regex variable names (eliminate false positivies)
- Support auto-generation of remote_tag
- Ensure manually generated call-id will be stored when message is sent (ie Call-ID: [call_id dialog="2] in a message within dialog 3 will adopt call-id 3) 



3.2.11 03-31-2011
- Improve parsing out of leading tabs and whitespace within CDATA sections
- Improve parsing of next_url, contact_, to_, from_ uri & name_and_uri parameters to exclude parameters after 1st >
- Tentative support for exec pcap_play on Windows
- Adjust exec_xml_character_conversion testcase for Linux & Windows support (echo "something" produces different results depending on platform)



3.2.10 02-24-2011
- Perform conversion of &lt; (<), &amp; (&), &gt; (>), &quot; ("), and &apos; (') in exec command and verify.
- Correct [cseq] keyword behavior to only reflect outgoing transactions (no longer updated on recv)
- Add last_cseq_number (extracted from last_cseq), received_cseq and received_cseq_method (based on last received request), cseq_method (based on last sent request), last_branch 
- Update parser to ignore embedded <scenario> <?xml> and <!DOCTYPE tags to facilitate xml-compliant include files
- Untested implementation of improved start-txn and use-txn tags
- Minor parser bug-fixes including ability now to place <scenario> tag immediately following <!DOCTYPE> tag.



3.2.9 02-07-2011
- Start in client mode even when first message is <recv> if <nop> preceeds it and -mc was specified (this eliminates need for <init> section in most cases).
- Fix bug associated with <exec command> as first statement
- Improve redirected output on windows, including waiting and retrying opening of exec log file to serialize exec output.
- Ensure dialog parameter not used with -mc option.


3.2.8 01-13-2011
- Add -trace_exec, -exec_file, -exec_overwrite parameters (to log stdout/stderr output from <exec>).
- Add -debug_file, -debug_overwrite parameters
- Add [contact_uri], [contact_value], [to_uri], [to_value], [from_uri], [from_value] keywords
- Add <exec verify="..."> option that waits for command to exit and validates return code was 0, aborting if not.
- Allow use of [remote_ip] and [local_ip] keywords in <init> section
- Modify tapress.pl to have delay between all key presses (rather than just digits)



3.2.7 12-20-2010
- Add [local_tag] [local_tag_param]
- Ad dump_xml  and -dump_sequence_diagram options
- Add parameterized includes




3.2.6 12-08-2010
- Add -trace_debug option to output information about SIPp execution
- Fix seg fault when using dump command without a parameter



3.2.5ed 11-17-2010
- Version format changed to parallel SF SIPp trunk which bumped version from 3.1 to 3.2
- Make <include> work relative to -sf directory and support embeded directories
- Extend test harness for cygwin to support windows test execution



3.14ed 11-10-2010
- Implement make install and make test targets
- Implement aa_expires option
- Implement ruby-based test harness in src/test directory
- Merge in two changes from sourceforge svn tree
  * Revision: 594 ENH: Added option to configure global T2 Timer (Patch contributed by sipp@hirschbichler.biz)
  * Revision: 595 FIX: sipp crashes when the line is too large. BugID-2968740(Patch contributed by Mitko-Mitev)
  
  
Initial cvs checkin is based on trunk version from sourceforge as of November 11, 2010, SIPp version 3.1.
All changes to date for enabling functional testing and improved ease of use:
* -mc option to enable dialog="n" option to messages
* allow dialog specification in keywords where this makes sense
* move per-dialog keywords (ie cseq) to per-dialog structure
* add additional keywords
* <xi:include> tag support
* auto-answer REGISTER requests when -aa is specified
* remove case sensitivity when parsing for To & From tags.
* print error message if address to bind to is in use (instead of silent quit)
* fix crash related to global statistics update
* Fix support for <exec> on Windows
* change char * to const char * where possible to reduce compiler warnings
* add additional debug target to makefile
* Fix worst formatting mistakes in terms of tab & indendation mis-usage

======================================


pre-CVS versions:

3.13ed 11-04-2010
- Fix <exec> on windows (by using cmd.exe instead of system command which requires sh)
3.12ed 10-27-2010

- Improve call_id auto-generation, important when using same dialog number in multiple files.

- Require "/> rather than "> in xi:include tag
3.11ed 10-18-2010

- support <xi:include pname="file"/> for include

3.1e 09-28-2010 - initial offering

- support -no_call_id_check
- support dialog=n tags for storing multiple dialogs state
- support auto-response to register requests
- fix crash in statistics
